const BigInt = require("big-integer");
const pako = require("pako");
const crypto = require("crypto");
const fs = require("fs");
const path = require("path");
var bodyParser = require('body-parser')
const cors = require("cors")

function convertBase10ToBigInt(value) {
    return BigInt(value);
}

function convertBigIntToByteArray(bigInt) {
    let byteArray = Array.from(bigInt.toArray(256).value);
    return byteArray;
}

function decompressByteArray(byteArray) {
    let decompressedArray = pako.inflate(byteArray);
    return decompressedArray;
}

function findDelimiter(byteArray, startIndex) {
    let delimiterIndex = byteArray.indexOf(255, startIndex);
    return delimiterIndex;
}

function readAndConvertToString(byteArray, startIndex, endIndex) {
    let stringBytes = byteArray.slice(startIndex, endIndex);
    let decoder = new TextDecoder("ISO-8859-1");
    let stringValue = decoder.decode(stringBytes);
    return stringValue;
}

function readEmailMobilePresentBit(byteArray) {
    let delimiterIndex = findDelimiter(byteArray, 0);
    let emailMobilePresentBit = readAndConvertToString(byteArray, 0, delimiterIndex);
    return emailMobilePresentBit;
}

function readSignature(byteArray) {
    let signatureStartIndex = byteArray.length - 256;
    let signature = byteArray.slice(signatureStartIndex, byteArray.length);
    return signature;
}

function convertByteToHexa(value) {
    return Buffer.from(value).toString('hex');
}

function readMobileEmail(byteArray, emailMobilePresentBit) {
    let emailMobile = {};
    if (emailMobilePresentBit === "3") {
        let mobileStartIndex = byteArray.length - 256 - 32;
        let emailStartIndex = byteArray.length - 256 - 32 - 32;
        emailMobile.mobile = convertByteToHexa(byteArray.slice(mobileStartIndex, byteArray.length - 256));
        emailMobile.email = convertByteToHexa(byteArray.slice(emailStartIndex, mobileStartIndex));
    } else if (emailMobilePresentBit === "2") {
        let mobileStartIndex = byteArray.length - 256 - 32;
        emailMobile.mobile = convertByteToHexa(byteArray.slice(mobileStartIndex, byteArray.length - 256))
    } else if (emailMobilePresentBit === "1") {
        let emailStartIndex = byteArray.length - 256 - 32;
        emailMobile.email = convertByteToHexa(byteArray.slice(emailStartIndex, byteArray.length - 256));
    }
    return emailMobile;
}




// const data = ``
// const data = ``


function verifyQR(data) {

    const bigIntData = convertBase10ToBigInt(data)

    const byteArray = convertBigIntToByteArray(bigIntData)
    console.log("OM ~ file: demo3.js:72 ~ d ", byteArray);


    const decompressByteArr = decompressByteArray(byteArray)
    console.log("OM ~ file: demo3.js:76 ~ decompressByteArr", decompressByteArr);

    let dilimiter = findDelimiter(decompressByteArr, 0)
    console.log("OM ~ file: demo3.js:79 ~ da", dilimiter);

    const Email_mobile_present_bit_indicator = {
        0: "Not Email/Mobile",
        1: "Only Email",
        2: "Only Mobile",
        3: "Both email/Mobile"
    }
    const isMobileOrEmailAvailable = readAndConvertToString(decompressByteArr, 0, dilimiter)
    console.log("OM ~ file: demo3.js:83 ~ as1", Email_mobile_present_bit_indicator[isMobileOrEmailAvailable]);

    const value = []
    const userDetails = {
        referenceId: "",
        name: "",
        dob: "",
        gender: "",
        careof: "",
        address: {
            district: "",
            landmark: "",
            house: "",
            location: "",
            pincode: "",
            postoffice: "",
            State: "",
            Street: "",
            Subdistrict: "",
            VTC: ""
        }
    }

    for (let i = 0; i < 15; i++) {
        // dilimiter = dilimiter + 1
        const nextDilimeter = findDelimiter(decompressByteArr, dilimiter + 1)
        console.log("OM ~ file: demo3.js:93 ~ nextDilimeter", dilimiter);

        const referenceId = readAndConvertToString(decompressByteArr, dilimiter + 1, nextDilimeter)
        value.push(referenceId)
        dilimiter = nextDilimeter
        console.log("OM ~ file: demo3.js:96 ~ referenceId", referenceId);
    }
    console.log("OM ~ file: demo3.js:120 ~ dilimiter", dilimiter);

    function extractPhoto(byteArray, isMobilePresent, isEmailPresent) {
        const VTC_DELIMITER = dilimiter;
        let photoStartIndex = VTC_DELIMITER + 1;
        let photoEndIndex = byteArray.length - 1 - 256;

        if (isMobilePresent) photoEndIndex -= 32;
        if (isEmailPresent) photoEndIndex -= 32;
        return byteArray.slice(photoStartIndex, photoEndIndex + 1);
    }

    const photoData = decompressByteArr.slice(dilimiter + 1, decompressByteArr.length - 1 - 256 - 32 - 32)
    // const photoData = extractPhoto(decompressByteArr, true, false)

    console.log("OM ~ file: demo3.js:125 ~ photoData", photoData);
    console.log("OM ~ file: demo3.js:125 ~ photoData", Buffer.from(photoData).toString('base64'));

    console.log("\n")

    function generateHashMobileOrEmailId(mobileNoOrEmailId, aadhaarNo) {
        let hash = `${mobileNoOrEmailId}`;
        const times = aadhaarNo[aadhaarNo.length - 1] === '0' ? 1 : aadhaarNo[aadhaarNo.length - 1];
        for (let i = 1; i <= times; i++) {
            hash = crypto.createHash('sha256').update(hash).digest('hex');
        }
        return hash;
    }


    const mobileNo = '7544883037'//'9795357883';
    const aadhaarNo = 'XXXX XXXX 4472';

    const mobileHashCode = generateHashMobileOrEmailId(mobileNo, aadhaarNo)
    console.log(mobileHashCode);

    const mobile = readMobileEmail(decompressByteArr, isMobileOrEmailAvailable)
    console.log("OM ~ file: demo3.js:123 ~ mobile", mobile);

    console.log(mobileHashCode === mobile.mobile);


    /* REad signature data */
    const signature = readSignature(decompressByteArr)
    console.log("OM ~ file: demo3.js:123 ~ signature", signature);
    console.log("OM ~ file: demo3.js:123 ~ signature", signature.length);


    // const publicKey = fs.readFileSync("./pub.pem", "utf-8");
    const publicKey = fs.readFileSync("./uidai_auth_sign_prod_2023.cer", "utf-8");
    // console.log("OM ~ file: demo3.js:153 ~ publicKey", publicKey);

    // const publicKey = `-----BEGIN PUBLIC KEY-----
    // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1Ig2iA6b9jenLPTGogsT
    // gLx4nv1p/V2T0q3RBa4gJDKrZt41bMEWaXkFUEuN5S+NtZvPbO/jJj2Wi1NvSQqV
    // YTA/7Jy0hVUOWJpYev7/PFzAAUOgkotQsmiS8hhpR5IOssO+1KrYrd7Kki+ZLkN/
    // 9PqaIEkrJhvEOP7wtNnF5JeHXbEFSz1fpHGRZIzZyogmQ89vaY9gXByG1MJzNqlp
    // RhoahAHqZtvBbU9BHqpfFQFV58V7fvewaHc/K3LRs47D80FgcsRLWn7eNRdKnai+
    // ozGwQQirRz+gKOOFslhQprTX3QSFkPJNiiMa42wPhUJvuMmTXE3ruzMQrJhDYt3/
    // jQIDAQAB
    // -----END PUBLIC KEY-----`

    /* -----BEGIN PUBLIC KEY-----
    MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1Ig2iA6b9jenLPTGogsT
    gLx4nv1p/V2T0q3RBa4gJDKrZt41bMEWaXkFUEuN5S+NtZvPbO/jJj2Wi1NvSQqV
    YTA/7Jy0hVUOWJpYev7/PFzAAUOgkotQsmiS8hhpR5IOssO+1KrYrd7Kki+ZLkN/
    9PqaIEkrJhvEOP7wtNnF5JeHXbEFSz1fpHGRZIzZyogmQ89vaY9gXByG1MJzNqlp
    RhoahAHqZtvBbU9BHqpfFQFV58V7fvewaHc/K3LRs47D80FgcsRLWn7eNRdKnai+
    ozGwQQirRz+gKOOFslhQprTX3QSFkPJNiiMa42wPhUJvuMmTXE3ruzMQrJhDYt3/
    jQIDAQAB
    -----END PUBLIC KEY-----
     */

    // Step 7: Convert certificate to base64 string
    const certificateBase64 = Buffer.from(publicKey)

    // Remove the signature value
    const signedData = decompressByteArr.slice(0, -256);
    console.log("OM ~ file: demo4.js:45 ~ signedData", signedData);

    // Validate the signature and signed data
    const isSignatureValid = crypto.verify('sha256WithRSAEncryption', signedData, publicKey, signature);
    console.log("OM ~ file: demo4.js:49 ~ isSignatureValid", isSignatureValid);
    return {
        value, isSignatureValid
    }
}

const express = require("express")
const app = express()

app.use(bodyParser.urlencoded({ extended: false }))

// parse application/json
app.use(bodyParser.json())
app.use(cors())

app.use(express.static('public'))

var options = {
    root: path.join(__dirname)
};
app.get("/", (req, res) => {
    res.sendFile("index.html", options)
})

app.post('/verify-qr', (req, res) => {

    const { qrData } = req.body;
    console.log("OM ~ file: qr-verify.js:210 ~ app.post ~ req.body", qrData);

    const d = verifyQR(qrData)
    res.json({ "data": d })
})


const PORT = process.env.PORT || 4000
app.listen(PORT, () => {
    console.log(`server running at ${PORT}`)
})


module.exports = app;